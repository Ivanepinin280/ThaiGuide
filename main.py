import logging
import os
import asyncio
import aiohttp
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.utils.markdown import hlink

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv("API_TOKEN")
TRIAL_PERIOD_DAYS = 2  # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤ –¥–Ω—è—Ö
PRICE_PER_WEEK = 10  # –¶–µ–Ω–∞ –∑–∞ 7 –¥–Ω–µ–π –≤ $
TRIPADVISOR_URL = "https://www.tripadvisor.ru/Restaurants-g293915-Thailand.html"

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–ø–∏—Å–æ–∫
active_users = {}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
def is_user_subscribed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"""
    return user_id in active_users and datetime.now() < active_users[user_id]

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def send_welcome(message: types.Message):
    user_id = message.from_user.id

    if is_user_subscribed(user_id):
        await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –≤ –¢–∞–∏–ª–∞–Ω–¥–µ.")
    else:
        trial_end = datetime.now() + timedelta(days=TRIAL_PERIOD_DAYS)
        active_users[user_id] = trial_end
        await message.answer(f"‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å –µ—Å—Ç—å {TRIAL_PERIOD_DAYS} –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å TripAdvisor
async def parse_tripadvisor():
    """–ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –∏–∑ TripAdvisor"""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(TRIPADVISOR_URL, headers={"User-Agent": "Mozilla/5.0"}) as response:
                if response.status != 200:
                    logging.error(f"–û—à–∏–±–∫–∞ {response.status} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å TripAdvisor")
                    return []

                text = await response.text()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ TripAdvisor: {e}")
            return []

    from bs4 import BeautifulSoup  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
    soup = BeautifulSoup(text, "html.parser")

    places = []
    for item in soup.find_all("div", class_="_1llCuDZj")[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º—Å—è 10 –º–µ—Å—Ç–∞–º–∏
        name_tag = item.find("a", class_="_15_ydu6b")
        if name_tag:
            name = name_tag.text
            link = "https://www.tripadvisor.ru" + name_tag["href"]
            places.append({"name": name, "link": link})

    return places

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç
async def send_places(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç"""
    user_id = message.from_user.id

    if not is_user_subscribed(user_id):
        await message.answer("‚ùå –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç—ë–∫. –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ $10 / 7 –¥–Ω–µ–π.")
        return

    places = await parse_tripadvisor()
    if not places:
        await message.answer("üòû –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    response = "üçΩ –õ—É—á—à–∏–µ –º–µ—Å—Ç–∞ –≤ –¢–∞–∏–ª–∞–Ω–¥–µ:\n\n"
    for place in places:
        response += f"üîπ {hlink(place['name'], place['link'])}\n"

    await message.answer(response)

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–µ—Å—Ç
@router.message(Command("places"))
async def send_places_command(message: types.Message):
    await send_places(message)

# –ö–æ–º–∞–Ω–¥–∞ –æ–ø–ª–∞—Ç—ã
@router.message(Command("pay"))
async def send_payment_info(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å $10", url="https://your-payment-link.com")]]
    )
    await message.answer("üí∞ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ $10 –∑–∞ 7 –¥–Ω–µ–π.", reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (—É–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏)
async def clean_expired_subscriptions():
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫"""
    while True:
        now = datetime.now()
        expired_users = [user_id for user_id, end_time in active_users.items() if end_time < now]

        for user_id in expired_users:
            del active_users[user_id]

        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ —á–∞—Å

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    asyncio.create_task(clean_expired_subscriptions())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

